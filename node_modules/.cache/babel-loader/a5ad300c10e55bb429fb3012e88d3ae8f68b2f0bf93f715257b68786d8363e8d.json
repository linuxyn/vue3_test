{"ast":null,"code":"// 组合式api，本质上都是函数\nimport { ref, watch, reactive } from \"vue\";\nexport default {\n  name: \"Demo\",\n  /*\n  watch:{\n    sum(newValue, oldValue){\n      console.log(newValue, oldValue)\n    },\n    sum:{\n      immediate:true,\n      deep:true,\n      handler(newValue, oldValue){\n        console.log(newValue, oldValue)\n      }\n    }\n  },*/\n  setup() {\n    // 数据\n    let sum = ref(0);\n    let msg = ref('你好啊');\n    let person = reactive({\n      name: '张三',\n      age: 33,\n      job: {\n        j1: {\n          salary: 20\n        }\n      }\n    });\n\n    // 情况一: 监视一个值\n    // watch(sum,(newValue, oldValue)=>{\n    //   console.log('sum的值变了',newValue, oldValue)\n    // },{immediate:true})\n\n    // 情况二: 监视ref所定义的多个响应式数据\n    // 1. 直接写多个watch在Vue中是支持的\n    // 2. vue3中还支持一个比较好的写法\n    // watch([sum,msg],(newValue, oldValue)=>{\n    //   console.log('sum或者msg的值变了',newValue, oldValue)\n    // },{immediate:true})\n\n    // 情况三:监视reactive所定义的一个响应式数据的全部属性,\n    //    1.注意:此处无法正确的获取oldValue，目前Vue 3.2.47版本依然无法解决\n    //    2.注意:强制开启了深度监视(deep配置无效)\n    // watch(person,(newValue,oldValue)=>{\n    //   console.log('person变化了',newValue,oldValue)\n    // },{deep:false}) // 此处的deep配置无效\n\n    // 情况四:监视reactive所定义的一个响应式数据的中的某个属性\n    // 要监听一个值需要写成一个函数，函数的返回值为要监听的值\n    watch(() => person.age, (newValue, oldValue) => {\n      console.log('person的age变化了', newValue, oldValue);\n    });\n\n    // 情况五:监视reactive所定义的一个响应式数据中\n\n    // 返回一个对象(常用)\n    return {\n      sum,\n      msg,\n      person\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","reactive","name","setup","sum","msg","person","age","job","j1","salary","newValue","oldValue","console","log"],"sources":["/Users/linuxyn/vue3_test/src/components/Demo.vue"],"sourcesContent":["<template>\n    <!-- Vue3组件中的模板结构中可以没有根标签 -->\n    <h2>当前请求:{{ sum }}</h2>\n    <button @click=\"sum++\">点我+1</button>\n    <h2>当前信息为:{{ msg }}</h2>\n    <button @click=\"msg+='!'\">修改信息</button>\n    <h2>姓名:{{ person.name }}</h2>\n    <h2>年龄:{{ person.age }}</h2>\n    <h2>薪资:{{ person.job.j1.salary }}k</h2>\n    <button @click=\"person.name+='~'\">修改姓名</button>\n    <button @click=\"person.age++\">年龄增长</button>\n    <button @click=\"person.job.j1.salary++\">涨薪</button>\n</template>\n<script>\n  // 组合式api，本质上都是函数\n  import { ref,watch,reactive } from \"vue\";\n  export default {\n    name: \"Demo\",\n    /*\n    watch:{\n      sum(newValue, oldValue){\n        console.log(newValue, oldValue)\n      },\n      sum:{\n        immediate:true,\n        deep:true,\n        handler(newValue, oldValue){\n          console.log(newValue, oldValue)\n        }\n      }\n    },*/\n    setup() {\n    // 数据\n    let sum = ref(0)\n    let msg = ref('你好啊')\n    let person = reactive({\n      name:'张三',\n      age:33,\n      job:{\n        j1:{\n          salary:20\n        }\n      }\n    })\n\n    // 情况一: 监视一个值\n    // watch(sum,(newValue, oldValue)=>{\n    //   console.log('sum的值变了',newValue, oldValue)\n    // },{immediate:true})\n\n    // 情况二: 监视ref所定义的多个响应式数据\n      // 1. 直接写多个watch在Vue中是支持的\n      // 2. vue3中还支持一个比较好的写法\n    // watch([sum,msg],(newValue, oldValue)=>{\n    //   console.log('sum或者msg的值变了',newValue, oldValue)\n    // },{immediate:true})\n\n    // 情况三:监视reactive所定义的一个响应式数据的全部属性,\n    //    1.注意:此处无法正确的获取oldValue，目前Vue 3.2.47版本依然无法解决\n    //    2.注意:强制开启了深度监视(deep配置无效)\n    // watch(person,(newValue,oldValue)=>{\n    //   console.log('person变化了',newValue,oldValue)\n    // },{deep:false}) // 此处的deep配置无效\n\n    // 情况四:监视reactive所定义的一个响应式数据的中的某个属性\n    // 要监听一个值需要写成一个函数，函数的返回值为要监听的值\n    watch(()=>person.age,(newValue,oldValue)=>{\n      console.log('person的age变化了',newValue,oldValue)\n    })\n\n    // 情况五:监视reactive所定义的一个响应式数据中\n\n\n\n    // 返回一个对象(常用)\n    return {\n      sum,\n      msg,\n      person,\n    };\n    },\n  }\n</script>\n<style scoped>\n\n</style>"],"mappings":"AAcE;AACA,SAASA,GAAG,EAACC,KAAK,EAACC,QAAO,QAAS,KAAK;AACxC,eAAe;EACbC,IAAI,EAAE,MAAM;EACZ;;;;;;;;;;;;;EAaAC,KAAKA,CAAA,EAAG;IACR;IACA,IAAIC,GAAE,GAAIL,GAAG,CAAC,CAAC;IACf,IAAIM,GAAE,GAAIN,GAAG,CAAC,KAAK;IACnB,IAAIO,MAAK,GAAIL,QAAQ,CAAC;MACpBC,IAAI,EAAC,IAAI;MACTK,GAAG,EAAC,EAAE;MACNC,GAAG,EAAC;QACFC,EAAE,EAAC;UACDC,MAAM,EAAC;QACT;MACF;IACF,CAAC;;IAED;IACA;IACA;IACA;;IAEA;IACE;IACA;IACF;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACAV,KAAK,CAAC,MAAIM,MAAM,CAACC,GAAG,EAAC,CAACI,QAAQ,EAACC,QAAQ,KAAG;MACxCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAACH,QAAQ,EAACC,QAAQ;IAC/C,CAAC;;IAED;;IAIA;IACA,OAAO;MACLR,GAAG;MACHC,GAAG;MACHC;IACF,CAAC;EACD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}