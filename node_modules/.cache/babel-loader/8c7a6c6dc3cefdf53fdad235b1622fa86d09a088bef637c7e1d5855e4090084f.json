{"ast":null,"code":"// 组合式api，本质上都是函数\nimport { ref, reactive, toRefs, toRaw, markRaw } from \"vue\";\nexport default {\n  name: \"Demo\",\n  setup() {\n    let sum = ref(0);\n    let person = reactive({\n      name: '张三',\n      age: 33,\n      job: {\n        j1: {\n          salary: 20\n        }\n      }\n    });\n    function showRawPerson() {\n      // console.log('person;',person)  // person的响应式对象Prxoy\n      const p = toRaw(person);\n      // console.log('rawPerson:',p) // 原始的raw对象 {name: '张三', age: 33, job: {…}}\n\n      // 对基础类型不生效, toRaw只能处理reactive对象\n      // console.log(sum)\n      // const sum1 = toRaw(sum)\n      // console.log(sum1==sum) // 结果为true\n    }\n\n    function addCar() {\n      // 注意这里直接这样写是不会生效的，因为return '...toRefs(person)'代表是会把person中每个属性拆分添加return的对象里面，此时返回值里面已经不存在person，想要页面响应式的变化可以直接在return中添加返回值person即可\n      let car = {\n        name: '奔驰',\n        price: 30\n      };\n      person.car = car;\n      // 后添加的属性自动是响应式的,如果不想让后添加的属性为响应式,怎么做？\n      person.car = markRaw(car);\n    }\n    function changPrice() {\n      // 添加完之后，上面的该车名和价格，实际上也改了只不过响应式不再生效了\n      person.car.price++;\n    }\n    return {\n      person,\n      sum,\n      showRawPerson,\n      ...toRefs(person),\n      addCar\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","toRefs","toRaw","markRaw","name","setup","sum","person","age","job","j1","salary","showRawPerson","p","addCar","car","price","changPrice"],"sources":["/Users/linuxyn/vue3_test/src/components/Demo.vue"],"sourcesContent":["<template>\n  <!-- Vue3组件中的模板结构中可以没有根标签 -->\n  <h2>当前求和:{{ sum }}</h2>\n  <button @click=\"sum++\">点我x++</button>\n  <h2>姓名:{{ name }}</h2>\n  <h2>年龄:{{ age }}</h2>\n  <h2>薪资:{{ job.j1.salary }}k</h2>\n  <h2 v-show=\"person.car\">座驾信息:{{ person.car }}</h2>\n  <button @click=\"name+='~'\">修改姓名</button>\n  <button @click=\"age++\">年龄增长</button>\n  <button @click=\"job.j1.salary++\">涨薪</button>\n  <button @click=\"showRawPerson\">输出最原始的person</button>\n  <button @click=\"addCar\">给人添加一台车</button>\n  <button @click=\"person.car.name +='!'\">换车名</button>\n  <button @click=\"changPrice\">换车价格</button>\n</template>\n<script>\n// 组合式api，本质上都是函数\n  import { ref,reactive,toRefs,toRaw, markRaw} from \"vue\";\n  export default {\n    name: \"Demo\",\n    setup() {\n      let sum = ref(0)\n      let person = reactive({\n        name:'张三',\n        age:33,\n        job:{\n          j1:{\n            salary:20\n          }\n        }\n      })\n\n      function showRawPerson(){\n        // console.log('person;',person)  // person的响应式对象Prxoy\n        const p = toRaw(person)\n        // console.log('rawPerson:',p) // 原始的raw对象 {name: '张三', age: 33, job: {…}}\n        \n        // 对基础类型不生效, toRaw只能处理reactive对象\n        // console.log(sum)\n        // const sum1 = toRaw(sum)\n        // console.log(sum1==sum) // 结果为true\n      }\n\n      function addCar(){\n        // 注意这里直接这样写是不会生效的，因为return '...toRefs(person)'代表是会把person中每个属性拆分添加return的对象里面，此时返回值里面已经不存在person，想要页面响应式的变化可以直接在return中添加返回值person即可\n        let car = {name:'奔驰',price:30}\n        person.car = car\n        // 后添加的属性自动是响应式的,如果不想让后添加的属性为响应式,怎么做？\n        person.car = markRaw(car) \n\n      }\n\n      function changPrice(){\n// 添加完之后，上面的该车名和价格，实际上也改了只不过响应式不再生效了\n        person.car.price++\n      }\n\n      return {\n        person,\n        sum,\n        showRawPerson,\n        ...toRefs(person),\n        addCar\n      }\n    },\n  }\n</script>\n<style scoped>\n\n</style>"],"mappings":"AAiBA;AACE,SAASA,GAAG,EAACC,QAAQ,EAACC,MAAM,EAACC,KAAK,EAAEC,OAAO,QAAO,KAAK;AACvD,eAAe;EACbC,IAAI,EAAE,MAAM;EACZC,KAAKA,CAAA,EAAG;IACN,IAAIC,GAAE,GAAIP,GAAG,CAAC,CAAC;IACf,IAAIQ,MAAK,GAAIP,QAAQ,CAAC;MACpBI,IAAI,EAAC,IAAI;MACTI,GAAG,EAAC,EAAE;MACNC,GAAG,EAAC;QACFC,EAAE,EAAC;UACDC,MAAM,EAAC;QACT;MACF;IACF,CAAC;IAED,SAASC,aAAaA,CAAA,EAAE;MACtB;MACA,MAAMC,CAAA,GAAIX,KAAK,CAACK,MAAM;MACtB;;MAEA;MACA;MACA;MACA;IACF;;IAEA,SAASO,MAAMA,CAAA,EAAE;MACf;MACA,IAAIC,GAAE,GAAI;QAACX,IAAI,EAAC,IAAI;QAACY,KAAK,EAAC;MAAE;MAC7BT,MAAM,CAACQ,GAAE,GAAIA,GAAE;MACf;MACAR,MAAM,CAACQ,GAAE,GAAIZ,OAAO,CAACY,GAAG;IAE1B;IAEA,SAASE,UAAUA,CAAA,EAAE;MAC3B;MACQV,MAAM,CAACQ,GAAG,CAACC,KAAK,EAAC;IACnB;IAEA,OAAO;MACLT,MAAM;MACND,GAAG;MACHM,aAAa;MACb,GAAGX,MAAM,CAACM,MAAM,CAAC;MACjBO;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}