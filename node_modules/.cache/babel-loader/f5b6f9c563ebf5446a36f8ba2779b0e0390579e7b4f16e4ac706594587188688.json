{"ast":null,"code":"// 组合式api，本质上都是函数\nimport { ref, watch, reactive } from \"vue\";\nexport default {\n  name: \"Demo\",\n  /*\n  watch:{\n    sum(newValue, oldValue){\n      console.log(newValue, oldValue)\n    },\n    sum:{\n      immediate:true,\n      deep:true,\n      handler(newValue, oldValue){\n        console.log(newValue, oldValue)\n      }\n    }\n  },*/\n  setup() {\n    // 数据\n    let sum = ref(0);\n    let msg = ref('你好啊');\n    let person = ref({\n      name: '张三',\n      age: 33,\n      job: {\n        j1: {\n          salary: 20\n        }\n      }\n    });\n    console.log(sum); // RefImpl value:0\n    console.log(msg); // RefImpl value:\"你好啊\"\n    console.log(person); // RefImpl value:Proxy对象\n\n    // sum里面存的是基本类型，所以不需要.value\n    watch(sum, (newValue, oldValue) => {\n      console.log('sum的值变化了', newValue, oldValue);\n    });\n\n    // person存的是对象，而ref包裹的对象默认只能监测浅层次的变化\n    // 而person.value的值为: Proxy {name: '张三', age: 33, job: {…}},本质上是reactive的响应式数据\n    // 而reactive定义的响应式数据时默认是深层次的，所以\n    watch(person.value, (newValue, oldValue) => {\n      console.log('job的值变化了', newValue, oldValue);\n    });\n\n    // person存的是对象，如果不加.value，直接开启deep:true，也能开启深层次的变化\n    watch(person, (newValue, oldValue) => {\n      console.log('job的值变化了', newValue, oldValue);\n    }, {\n      deep: true\n    });\n\n    // 返回一个对象(常用)\n    return {\n      sum,\n      msg,\n      person\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","reactive","name","setup","sum","msg","person","age","job","j1","salary","console","log","newValue","oldValue","value","deep"],"sources":["/Users/linuxyn/vue3_test/src/components/Demo.vue"],"sourcesContent":["<template>\n    <!-- Vue3组件中的模板结构中可以没有根标签 -->\n    <h2>当前请求:{{ sum }}</h2>\n    <button @click=\"sum++\">点我+1</button>\n    <h2>当前信息为:{{ msg }}</h2>\n    <button @click=\"msg+='!'\">修改信息</button>\n    <h2>姓名:{{ person.name }}</h2>\n    <h2>年龄:{{ person.age }}</h2>\n    <h2>薪资:{{ person.job.j1.salary }}k</h2>\n    <button @click=\"person.name+='~'\">修改姓名</button>\n    <button @click=\"person.age++\">年龄增长</button>\n    <button @click=\"person.job.j1.salary++\">涨薪</button>\n</template>\n<script>\n  // 组合式api，本质上都是函数\n  import { ref,watch,reactive } from \"vue\";\n  export default {\n    name: \"Demo\",\n    /*\n    watch:{\n      sum(newValue, oldValue){\n        console.log(newValue, oldValue)\n      },\n      sum:{\n        immediate:true,\n        deep:true,\n        handler(newValue, oldValue){\n          console.log(newValue, oldValue)\n        }\n      }\n    },*/\n    setup() {\n    // 数据\n    let sum = ref(0)\n    let msg = ref('你好啊')\n    let person = ref({\n      name:'张三',\n      age:33,\n      job:{\n        j1:{\n          salary:20\n        }\n      }\n    })\n    console.log(sum) // RefImpl value:0\n    console.log(msg) // RefImpl value:\"你好啊\"\n    console.log(person) // RefImpl value:Proxy对象\n\n    // sum里面存的是基本类型，所以不需要.value\n    watch(sum,(newValue,oldValue)=>{\n      console.log('sum的值变化了',newValue,oldValue)\n    })\n\n    // person存的是对象，而ref包裹的对象默认只能监测浅层次的变化\n    // 而person.value的值为: Proxy {name: '张三', age: 33, job: {…}},本质上是reactive的响应式数据\n    // 而reactive定义的响应式数据时默认是深层次的，所以\n    watch(person.value,(newValue,oldValue)=>{\n      console.log('job的值变化了',newValue,oldValue)\n    })\n\n    // person存的是对象，如果不加.value，直接开启deep:true，也能开启深层次的变化\n    watch(person,(newValue,oldValue)=>{\n      console.log('job的值变化了',newValue,oldValue)\n    },{deep:true})\n\n\n    // 返回一个对象(常用)\n    return {\n      sum,\n      msg,\n      person,\n    };\n    },\n  }\n</script>\n<style scoped>\n\n</style>"],"mappings":"AAcE;AACA,SAASA,GAAG,EAACC,KAAK,EAACC,QAAO,QAAS,KAAK;AACxC,eAAe;EACbC,IAAI,EAAE,MAAM;EACZ;;;;;;;;;;;;;EAaAC,KAAKA,CAAA,EAAG;IACR;IACA,IAAIC,GAAE,GAAIL,GAAG,CAAC,CAAC;IACf,IAAIM,GAAE,GAAIN,GAAG,CAAC,KAAK;IACnB,IAAIO,MAAK,GAAIP,GAAG,CAAC;MACfG,IAAI,EAAC,IAAI;MACTK,GAAG,EAAC,EAAE;MACNC,GAAG,EAAC;QACFC,EAAE,EAAC;UACDC,MAAM,EAAC;QACT;MACF;IACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAACR,GAAG,GAAE;IACjBO,OAAO,CAACC,GAAG,CAACP,GAAG,GAAE;IACjBM,OAAO,CAACC,GAAG,CAACN,MAAM,GAAE;;IAEpB;IACAN,KAAK,CAACI,GAAG,EAAC,CAACS,QAAQ,EAACC,QAAQ,KAAG;MAC7BH,OAAO,CAACC,GAAG,CAAC,UAAU,EAACC,QAAQ,EAACC,QAAQ;IAC1C,CAAC;;IAED;IACA;IACA;IACAd,KAAK,CAACM,MAAM,CAACS,KAAK,EAAC,CAACF,QAAQ,EAACC,QAAQ,KAAG;MACtCH,OAAO,CAACC,GAAG,CAAC,UAAU,EAACC,QAAQ,EAACC,QAAQ;IAC1C,CAAC;;IAED;IACAd,KAAK,CAACM,MAAM,EAAC,CAACO,QAAQ,EAACC,QAAQ,KAAG;MAChCH,OAAO,CAACC,GAAG,CAAC,UAAU,EAACC,QAAQ,EAACC,QAAQ;IAC1C,CAAC,EAAC;MAACE,IAAI,EAAC;IAAI,CAAC;;IAGb;IACA,OAAO;MACLZ,GAAG;MACHC,GAAG;MACHC;IACF,CAAC;EACD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}