{"ast":null,"code":"import { reactive, computed } from \"vue\";\nexport default {\n  name: \"Demo\",\n  // Vue2中的写法 不推荐\n  /* computed: {\n        fullName(){\n      return this.person.firstName + '-' + this.person.lastName\n    }\n  },*/\n  setup() {\n    // 数据\n    let person = reactive({\n      firstName: \"张\",\n      lastName: '三'\n    });\n    // Vue3中计算属性的值不再是一个对象了，而是一个函数\n    // 这里直接给person增加一个属性fullName，在vue3中直接可以进行响应式渲染\n    // 计算属性-简写\n    person.fullName = computed(() => {\n      return person.firstName + '-' + person.lastName;\n    });\n    // 计算属性-完整写法(考虑读和写)\n    person.fullName = computed({\n      get() {\n        return person.firstName + '-' + person.lastName;\n      },\n      set(value) {\n        const nameArr = value.split('-');\n        person.firstName = nameArr[0];\n        person.lastName = nameArr[1];\n      }\n    });\n    return {\n      person\n    };\n  }\n};","map":{"version":3,"names":["reactive","computed","name","setup","person","firstName","lastName","fullName","get","set","value","nameArr","split"],"sources":["/Users/linuxyn/vue3_test/src/components/Demo.vue"],"sourcesContent":["<template>\n    <!-- Vue3组件中的模板结构中可以没有根标签 -->\n    <h1>一个人的信息</h1>\n    姓: <input type=\"text\" v-model=\"person.firstName\">\n    <br>\n    名: <input type=\"text\" v-model=\"person.lastName\">\n    <br>\n    全名:{{ person.fullName }}\n    <br>\n    全名:<input type=\"text\" v-model=\"person.fullName\">\n    \n</template>\n<script>\n  import { reactive,computed } from \"vue\";\n  export default {\n    name: \"Demo\",\n    // Vue2中的写法 不推荐\n    /* computed: {\n          fullName(){\n        return this.person.firstName + '-' + this.person.lastName\n      }\n    },*/\n    setup() {\n      // 数据\n      let person = reactive({\n        firstName:\"张\",\n        lastName:'三',\n      })\n      // Vue3中计算属性的值不再是一个对象了，而是一个函数\n      // 这里直接给person增加一个属性fullName，在vue3中直接可以进行响应式渲染\n      // 计算属性-简写\n      person.fullName = computed(()=>{\n        return person.firstName + '-' + person.lastName\n      })\n      // 计算属性-完整写法(考虑读和写)\n      person.fullName = computed({\n        get(){\n          return person.firstName + '-' + person.lastName\n        },\n        set(value){\n          const nameArr = value.split('-')\n          person.firstName = nameArr[0]\n          person.lastName = nameArr[1]\n        }\n        \n      })\n      return {\n        person,\n      };\n    },\n  }\n</script>\n<style scoped>\n\n</style>"],"mappings":"AAaE,SAASA,QAAQ,EAACC,QAAO,QAAS,KAAK;AACvC,eAAe;EACbC,IAAI,EAAE,MAAM;EACZ;EACA;;;;;EAKAC,KAAKA,CAAA,EAAG;IACN;IACA,IAAIC,MAAK,GAAIJ,QAAQ,CAAC;MACpBK,SAAS,EAAC,GAAG;MACbC,QAAQ,EAAC;IACX,CAAC;IACD;IACA;IACA;IACAF,MAAM,CAACG,QAAO,GAAIN,QAAQ,CAAC,MAAI;MAC7B,OAAOG,MAAM,CAACC,SAAQ,GAAI,GAAE,GAAID,MAAM,CAACE,QAAO;IAChD,CAAC;IACD;IACAF,MAAM,CAACG,QAAO,GAAIN,QAAQ,CAAC;MACzBO,GAAGA,CAAA,EAAE;QACH,OAAOJ,MAAM,CAACC,SAAQ,GAAI,GAAE,GAAID,MAAM,CAACE,QAAO;MAChD,CAAC;MACDG,GAAGA,CAACC,KAAK,EAAC;QACR,MAAMC,OAAM,GAAID,KAAK,CAACE,KAAK,CAAC,GAAG;QAC/BR,MAAM,CAACC,SAAQ,GAAIM,OAAO,CAAC,CAAC;QAC5BP,MAAM,CAACE,QAAO,GAAIK,OAAO,CAAC,CAAC;MAC7B;IAEF,CAAC;IACD,OAAO;MACLP;IACF,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}